knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
double.number = function(number.to.be.doubled) {
return(number.to.be.doubled)
}
#test the function by seeing if it will double the number of your choice
double.number(2)
#define the function
double.number = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
double.number(2)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
#arguments are the number of sides on die 1 and number of sides on die 2
dice.roller <- function(die1sides, die2sides ){
#pick 1 random number between 1 and the number of sides on the die and store it, once for each die
d1 <- sample( 1:die1sides, 1)
d2 <- sample( 1:die2sides, 1)
#Display results
return( c(d1, d2) )
}
#roll a d8 and d20
dice.roller(8, 20)
dice.roller(6, 6)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
#arguments are the number of sides on die 1 and number of sides on die 2
dice.roller <- function(die1sides, die2sides ){
#pick 1 random number between 1 and the number of sides on the die and store it, once for each die
d1 <- sample( 1:die1sides, 1)
d2 <- sample( 1:die2sides, 1)
#Display results
return( c(d1, d2) )
}
#roll a d8 and d20
dice.roller(8, 20)
dice.roller(6, 6)
batting.average = function(number.of.hits, number.of.at.bats) {
return(number.of.hits / number.of.at.bats)
}
batting.average(2654, 7706)
#code always takes this form: sample(vector, number of values to pick)
#pick one random number between 1 and 10
sample(1:10, 1)
#pick one random number out of this list of numbers: 2, 35, 6, 7, 10, 0
sample(c(2, 35, 6, 7, 10, 0), 1)
#pick one random number between 1 and 50
sample(1:50, 1)
#pick two random numbers between 1 and 50
sample(1:50, 2)
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
#arguments are the number of sides on die 1 and number of sides on die 2
dice.roller <- function(die1sides, die2sides ){
#pick 1 random number between 1 and the number of sides on the die and store it, once for each die
d1 <- sample( 1:die1sides, 1)
d2 <- sample( 1:die2sides, 1)
#Display results
return( c(d1, d2) )
}
#roll a d8 and d20
dice.roller(8, 20)
dice.roller(6, 6)
batting.average = function(number.of.hits, number.of.at.bats) {
return(number.of.hits / number.of.at.bats)
}
batting.average(2654, 7706)
#code always takes this form: sample(vector, number of values to pick)
#pick one random number between 1 and 10
sample(1:10, 1)
#pick one random number out of this list of numbers: 2, 35, 6, 7, 10, 0
sample(c(2, 35, 6, 7, 10, 0), 1)
#pick one random number between 1 and 50
sample(1:50, 1)
#pick two random numbers between 1 and 50
sample(1:50, 2)
example.function.2 = function() {
random.number = sample(1:100, 1)
if random.number > 100
return FALSE
else
return TRUE
}
example.function.2 = function() {
if sample(1:100, 1) > 100
return FALSE
else
return TRUE
}
example.function.2 = function() {
if (sample(1:100, 1) > 100)
return(FALSE)
else
return(TRUE)
}
example.function.2
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2 = function() {
if (sample(1:100, 1) > 44)
return(FALSE)
else
return(TRUE)
}
example.function.2()
example.function.2()
example.function.2()
example.function.2()
example.function.2()
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
#arguments are the number of sides on die 1 and number of sides on die 2
dice.roller <- function(die1sides, die2sides ){
#pick 1 random number between 1 and the number of sides on the die and store it, once for each die
d1 <- sample( 1:die1sides, 1)
d2 <- sample( 1:die2sides, 1)
#Display results
return( c(d1, d2) )
}
#roll a d8 and d20
dice.roller(8, 20)
dice.roller(6, 6)
batting.average = function(number.of.hits, number.of.at.bats) {
return(number.of.hits / number.of.at.bats)
}
batting.average(2654, 7706)
#code always takes this form: sample(vector, number of values to pick)
#pick one random number between 1 and 10
sample(1:10, 1)
#pick one random number out of this list of numbers: 2, 35, 6, 7, 10, 0
sample(c(2, 35, 6, 7, 10, 0), 1)
#pick one random number between 1 and 50
sample(1:50, 1)
#pick two random numbers between 1 and 50
sample(1:50, 2)
example.function.2 = function() {
if (sample(1:100, 1) > 44)
return(FALSE)
else
return(TRUE)
}
example.function.2()
new.sum1 <- function( vector){
#Create variables i and current.sum
i = 1
current.sum <- 0
#repeat loop
repeat {
current.sum <- current.sum + vector[i]
i <- i + 1
if(i > length(vector) ){
break
}
}
#display result
return(current.sum)
}
new.sum1(loans$annual_income )
sum(loans$annual_income)
three.units.o.positive <-function(){
donors.examined = 0
units.of.o.blood = 0
#initialize variables that we will need; give them useful names
repeat{
#"test" a person's blood type and update variables accordingly
donors.examined += 1
if (sample(1:100) < 44) {
units.of.o.blood += 1
}
#what condition do we need to meet for us to break the loop?
if (units.of.o.blood >= 3) {
break
}
}
return(donors.examined)
}
three.units.o.positive <-function(){
donors.examined = 0
units.of.o.blood = 0
#initialize variables that we will need; give them useful names
repeat{
#"test" a person's blood type and update variables accordingly
donors.examined = donors.examined + 1
if (sample(1:100) < 44) {
units.of.o.blood = units.of.o.blood + 1
}
#what condition do we need to meet for us to break the loop?
if (units.of.o.blood >= 3) {
break
}
}
return(donors.examined)
}
replicate(10, three.units.o.positive())
three.units.o.positive <-function(){
donors.examined = 0
units.of.o.blood = 0
#initialize variables that we will need; give them useful names
repeat{
#"test" a person's blood type and update variables accordingly
donors.examined = donors.examined + 1
if (sample(1:100, 1) < 44) {
units.of.o.blood = units.of.o.blood + 1
}
#what condition do we need to meet for us to break the loop?
if (units.of.o.blood >= 3) {
break
}
}
return(donors.examined)
}
replicate(10, three.units.o.positive())
replicate(10000, mug.night())
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
loans <- read.csv("loan50.csv")
head(loans)
length(loans$annual_income)
sum(loans$annual_income)
mean(loans$annual_income)
sum(loans$annual_income) / length(loans$annual_income)
example.average.function.1 <- function( vector.to.be.averaged){
###write code here that finds the average of vector.to.be.averaged WITHOUT using mean()
average = sum(vector.to.be.averaged) / length(vector.to.be.averaged)
return(average)
}
example.average.function.1(loans$annual_income)
#define the function
doubling.fun = function(number.to.be.doubled) {
return(number.to.be.doubled * 2)
}
#test the function by seeing if it will double the number of your choice
doubling.fun(2)
#arguments are the number of sides on die 1 and number of sides on die 2
dice.roller <- function(die1sides, die2sides ){
#pick 1 random number between 1 and the number of sides on the die and store it, once for each die
d1 <- sample( 1:die1sides, 1)
d2 <- sample( 1:die2sides, 1)
#Display results
return( c(d1, d2) )
}
#roll a d8 and d20
dice.roller(8, 20)
dice.roller(6, 6)
batting.average = function(number.of.hits, number.of.at.bats) {
return(number.of.hits / number.of.at.bats)
}
batting.average(2654, 7706)
#code always takes this form: sample(vector, number of values to pick)
#pick one random number between 1 and 10
sample(1:10, 1)
#pick one random number out of this list of numbers: 2, 35, 6, 7, 10, 0
sample(c(2, 35, 6, 7, 10, 0), 1)
#pick one random number between 1 and 50
sample(1:50, 1)
#pick two random numbers between 1 and 50
sample(1:50, 2)
example.function.2 = function() {
if (sample(1:100, 1) > 44)
return(FALSE)
else
return(TRUE)
}
example.function.2()
new.sum1 <- function( vector){
#Create variables i and current.sum
i = 1
current.sum <- 0
#repeat loop
repeat {
current.sum <- current.sum + vector[i]
i <- i + 1
if(i > length(vector) ){
break
}
}
#display result
return(current.sum)
}
new.sum1(loans$annual_income )
sum(loans$annual_income)
three.units.o.positive <-function(){
donors.examined = 0
units.of.o.blood = 0
#initialize variables that we will need; give them useful names
repeat{
#"test" a person's blood type and update variables accordingly
donors.examined = donors.examined + 1
if (sample(1:100, 1) < 44) {
units.of.o.blood = units.of.o.blood + 1
}
#what condition do we need to meet for us to break the loop?
if (units.of.o.blood >= 3) {
break
}
}
return(donors.examined)
}
replicate(10, three.units.o.positive())
mug.night = function() {
treats.left = 45
turns.taken = 0
repeat {
turns.taken = turns.taken + 1
chance = sample(1:100, 1)
if (chance < 10) {
treats.left = treats.left - 0
} else if (chance < 20) {
treats.left = treats.left - 2
} else if (chance < 70) {
treats.left = treats.left - 1
}
if (treats.left <= 0) {
break
}
}
return(turns.taken)
}
replicate(10000, mug.night())
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
current.number = 23
numbers.printed = 0
repeat {
print(current.number)
numbers.printed = numbers.printed + 1
current.number = current.number + 23
if (numbers.printed > 15) {
break
}
}
current.number = 23
numbers.printed = 0
repeat {
print(current.number)
numbers.printed = numbers.printed + 1
current.number = current.number + 23
if (numbers.printed == 15) {
break
}
}
replicate(10, three.units.o.positive())
many.trials = replicate(10, three.units.o.positive())
summary(many.trials)
many.trials = replicate(1000, three.units.o.positive())
summary(many.trials)
many.trials = replicate(10000, three.units.o.positive())
summary(many.trials)
many.trials = replicate(1000000, three.units.o.positive())
summary(many.trials)
